(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{117:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Logstash는 Input Log를 받아 Output Log로 반환하는 형태로 되어있고 또한 중간에 Filter를 이용해서 Input으로 오는 데이터를 변경할 수 있습니다.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo docker run -it --rm logstash -e 'input { stdin { } } output { stdout { } }'\n")])])]),a("p",[t._v("간단한 예를 들어 위 명령어를 사용하면 입력을 함과 동시에 계속 출력이 됩니다. 우리가 입력하는 텍스트가 input 그리고 터미널에 출력되는 데이터가 output입니다.")]),t._v(" "),a("h3",{attrs:{id:"데이터연결하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터연결하기"}},[t._v("#")]),t._v(" 데이터연결하기")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("input "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tjdbc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tjdbc_connection_string => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc:mysql://URL주소"')]),t._v("\n\t\tjdbc_user => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v("\n\t\tjdbc_driver_class => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.mysql.cj.jdbc.Driver"')]),t._v("\n\t\tjdbc_password => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),t._v("\n\t\tjdbc_driver_library => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/share/compose/mysql-connector-java-8.0.19.jar"')]),t._v("\n\t\tschedule => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*/1 * * * * "')]),t._v("\n\t\tstatement => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT * FROM mytable"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\noutput "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\telasticsearch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\thosts => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"elasticsearch:9200"')]),t._v("\n\t\tuser => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v("\n\t\tpassword => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("input에 jdbc블록을 사용하기위해서는 먼저 "),a("code",[t._v("logstash-plugin install logstash-input-jdbc")]),t._v("명령어를 이용해서 플러그인을 설치합니다. 만약 저처럼 직접 mysql 커넥션 파일을 다운받으려한다면\n"),a("a",{attrs:{href:"https://mvnrepository.com/artifact/mysql/mysql-connector-java",target:"_blank",rel:"noopener noreferrer"}},[t._v("메이븐 저장소"),a("OutboundLink")],1),t._v("에서 쉽게 다운받을 수 있습니다.")]),t._v(" "),a("blockquote",[a("p",[t._v("만약 도커로 구동한다면 아래 코드를 추가합니다.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("RUN /usr/share/logstash/bin/logstash-plugin install logstash-input-jdbc\n")])])])]),t._v(" "),a("h3",{attrs:{id:"_2개-이상의-테이블-가져오기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2개-이상의-테이블-가져오기"}},[t._v("#")]),t._v(" 2개 이상의 테이블 가져오기")]),t._v(" "),a("p",[t._v("logstash는 싱글이벤트기반이기때문에 만약 다수의 이벤트를 가져오려한다면 output에서 스트림을 나눠주어야합니다.")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("input "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tjdbc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ttype => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user"')]),t._v("\t\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//생략")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ninput "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tjdbc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ttype => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"product"')]),t._v("\t\t\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//생략")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\noutput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tif "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" == "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\telasticsearch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//생략")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tif "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" == "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"product"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//생략")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"데이터-동기화하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터-동기화하기"}},[t._v("#")]),t._v(" 데이터 동기화하기")]),t._v(" "),a("p",[t._v("만약 RDBMS를 주 데이터베이스로 사용하고 Elastic Seaerch를 보조적인 분석용으로 두 데이터를 계속 동기화시킬 수 있습니다. 만약 기존 생성한 테이블에 생성시간/업데이트 칼럼을 따로 만들지 않았다면 추가해주어야합니다.")]),t._v(" "),a("h4",[t._v("created_at, updated_at 추가")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER [Table]\nADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\nADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;\n")])])]),a("h4",[t._v("logstash 설정파일 수정")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[t._v("input "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tjdbc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ttype => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user"')]),t._v("\t\n\t\tstatement => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT *, UNIX_TIMESTAMP(updated_at) AS unix_ts_in_secs FROM adwords WHERE (UNIX_TIMESTAMP(updated_at) > :sql_last_value) ORDER BY updated_at ASC"')]),t._v("\n\t\ttracking_column => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unix_ts_in_secs"')]),t._v("\n\t\ttracking_column_type => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"numeric"')]),t._v("\n\t\tuse_column_value => "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\t\tschedule => "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*/10 * * * * *"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//10초마다 동기화")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//생략")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("jdbc와 동기화하기 위해 먼저 "),a("code",[t._v("tracking_column")]),t._v("값을 true로 할당합니다.. 다음 동기화하는데 사용할 칼럼을 명시해주어 야합니다. 이때 칼럼과 값의 타입을 설정해주어야 하고 값의 타입은 Datetime과 Numeric만 허용합니다. 따라서 "),a("code",[t._v("tracking_column")]),t._v("은 "),a("code",[t._v("unix_ts_in_secs")]),t._v(", "),a("code",[t._v("tracking_column_type")]),t._v("는 'numeric'으로 할당합니다.\n"),a("br"),t._v(" "),a("br"),t._v(" "),a("code",[t._v("unix_ts_in_secs")]),t._v("칼럼은 "),a("code",[t._v("input.jdbc.statement")]),t._v("에서 updateAt을 타임 스탬프 값으로 바꾼 칼럼입니다.\n만약 처음부터 값을 다시 가져오고싶다면 "),a("code",[t._v("clean_run => true")]),t._v("항목을 input.jdbc에 추가합니다.\n"),a("br"),a("br"),t._v(" "),a("code",[t._v("clean_run")]),t._v("옵션은 sql_last_value가 있더라도 Datetime은 1970년 1월 1일부터 numeric은 0부터 다시 시작합니다. sql_last_value값을 동적으로 바꾸고 싶다면 "),a("code",[t._v('last_run_metadata_path => "/mypath/.logstash_jdbc_last_run"')]),t._v(" 와같이 별도의 경로값을 주어 파일 데이터에서 직접 수정할 수 있습니다.")])])}),[],!1,null,null,null);s.default=e.exports}}]);