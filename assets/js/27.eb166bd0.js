(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{112:function(t,a,s){"use strict";s.r(a);var n=s(3),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("구글에서 개발한  쿠버네티스란 컨테이너 오케스트레이션 툴 입니다. 용어를 조금 풀어서 이야기하면 만약 수십 대의 컴퓨터가 있다면 컨테이너를 어떻게 동작시켜야할까요? 또한 컴퓨터 유휴자원을 어떻게 분배하고 만약 놀고 있는 컴퓨터가 있다면 당장 일만하고 있는 컴퓨터의 부하를 나눠줄 수 있을까요? 이러한 전체적인 컨테이너 오케스트레이션을 쉽게 하기 위해 나온 것이 쿠버네티스입니다.")]),t._v(" "),s("h3",{attrs:{id:"클러스터"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#클러스터"}},[t._v("#")]),t._v(" 클러스터")]),t._v(" "),s("p",[t._v("쿠버네티스 전체를 조종하는 컨트롤타워 같은 곳으로 API, 스케쥴링, 컨트롤링등 전반적인 시스템을 관할합니다. 조금 더 쉽게 이야기해보겠습니다. 내가 만약 3대의 컴퓨터를 쿠버네티스를 사용하여 앱을 배포하려 한다고 하겠습니다. 우선 3대중 전체를 컨트롤할 컴퓨터가 필요합니다. 이 컴퓨터가 클러스터가 됩니다. 클러스터는 나머지 2대의 컴퓨터를 스케줄링하고 로그 등을 기록하며 노드들의 상태에 따라 전체 시스템을 조절하기 때문에 가장 안정적인 환경 내에서 작동해야 합니다.")]),t._v(" "),s("h3",{attrs:{id:"파드-pods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#파드-pods"}},[t._v("#")]),t._v(" 파드(Pods)")]),t._v(" "),s("p",[t._v("파드는 하나 또는 그 이상의 어플리케이션 컨테이너들의 그룹이며 공유스토리지, IP주소등을 포함하며 쿠버네티스에서 사용하는 가장 작은 단위입니다. 쿠버네티스에는 모든것이 컨테이너가 아닌 파드단위로 만들어지며 각 파드내에는 컨테이너가 위치합니다.")]),t._v(" "),s("h3",{attrs:{id:"노드"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#노드"}},[t._v("#")]),t._v(" 노드")]),t._v(" "),s("p",[t._v("이전에 언급하였던 나머지 2대의 컴퓨터가 하는 워커머신 역활을 노드라고합니다.  파드들은 모두 노드상에서 동작하며 각 파드들에 대한 사용현황, 로그, 명령등을 실행합니다.")]),t._v(" "),s("h3",{attrs:{id:"쿠버네티스-오브젝트"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#쿠버네티스-오브젝트"}},[t._v("#")]),t._v(" 쿠버네티스 오브젝트")]),t._v(" "),s("p",[t._v("쿠버네티스에서는 모든 것이 오브젝트입니다. 외부에서 전달받은 트래픽을 내부로 맵핑하는것도 오브젝트단위이며 각각의 팟도 오브젝트 단위로 움직입니다. 예를 들어 위에서 언급한 파드는 컨테이너들을 정의해줍니다. 또한  각 서비스들 간의 네트워크 설정과 포트등을 맵핑해주는 Services, 트래픽의 분산 부하를 돕는 LoadBalancer, 리버스 프록시의 역활을하며 외부트래픽을 내부로 맵핑해주는 Ingress가 이에 해당합니다. 각 오브젝트들은 yaml파일로 정의됩니다.")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#명시할 api버전")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 오브젝트의 종류")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pod "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 오브젝트의 이름")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" web "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#오브젝트간 구별할 이름")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" client "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 컨테이너 이름")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" docker_web_app  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 이미지")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containerPort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000 ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#연결할 포트")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);